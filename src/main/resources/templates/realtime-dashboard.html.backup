<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>실시간 대시보드 - Search Insights</title>
  
  <!-- CSS 파일들 -->
  <link rel="stylesheet" th:href="@{/css/dashboard-main.css}">
  <link rel="stylesheet" th:href="@{/css/dashboard-dark-theme.css}">
  <link rel="stylesheet" th:href="@{/css/dashboard-components.css}">
</head>
<body>
<div class="container">
                  inset 0 1px 0 rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
    }
    h1 {
      background: linear-gradient(135deg, #00d4ff 0%, #b794f6 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      padding-bottom: 15px;
      font-weight: 600;
      letter-spacing: -0.5px;
    }
    .dashboard-box {
      margin-top: 20px;
      padding: 20px;
      background: rgba(255, 255, 255, 0.02);
      border: 1px solid rgba(255, 255, 255, 0.05);
      border-radius: 12px;
      backdrop-filter: blur(10px);
      transition: all 0.3s ease;
    }
    .dashboard-box:hover {
      border-color: rgba(0, 212, 255, 0.3);
      box-shadow: 0 0 20px rgba(0, 212, 255, 0.1);
    }
    .dashboard-title {
      font-weight: 600;
      color: #ffffff;
      margin-bottom: 12px;
      font-size: 0.95em;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      opacity: 0.9;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      padding: 12px 10px;
      text-align: left;
      border-bottom: 1px solid rgba(255, 255, 255, 0.05);
      color: #e4e4e7;
    }
    tr:hover td {
      background: rgba(255, 255, 255, 0.02);
    }
    th {
      background: rgba(255, 255, 255, 0.03);
      color: #b8b8bc;
      font-weight: 500;
      text-transform: uppercase;
      font-size: 0.75em;
      letter-spacing: 0.5px;
    }
    .active-users {
      font-size: 32px;
      font-weight: 700;
      background: linear-gradient(135deg, #00d4ff 0%, #b794f6 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-shadow: 0 0 30px rgba(0, 212, 255, 0.5);
    }
    .update-time {
      font-size: 11px;
      color: #6b7280;
      text-align: right;
      opacity: 0.7;
      font-weight: 400;
    }
    .progress-bar {
      background: rgba(255, 255, 255, 0.05);
      height: 6px;
      border-radius: 3px;
      margin-right: 10px;
      overflow: hidden;
    }
    .progress-value {
      background: linear-gradient(90deg, #00d4ff 0%, #b794f6 100%);
      height: 6px;
      border-radius: 3px;
      box-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
      transition: width 0.5s ease;
    }

    /* 메인 탭 스타일링 */
    .main-tabs {
      display: flex;
      margin-bottom: 25px;
      border-bottom: 1px solid rgba(255, 255, 255, 0.05);
      gap: 5px;
    }
    .main-tab {
      padding: 12px 24px;
      cursor: pointer;
      border: 1px solid transparent;
      border-bottom: none;
      border-radius: 12px 12px 0 0;
      background: rgba(255, 255, 255, 0.02);
      margin-right: 2px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      font-weight: 500;
      font-size: 0.9em;
      letter-spacing: 0.3px;
      position: relative;
      overflow: hidden;
    }
    .main-tab:hover {
      background: rgba(0, 212, 255, 0.05);
      border-color: rgba(0, 212, 255, 0.2);
      transform: translateY(-2px);
    }
    .main-tab::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(0, 212, 255, 0.2), transparent);
      transition: left 0.5s;
    }
    .main-tab:hover::before {
      left: 100%;
    }
    .main-tab.active {
      background: linear-gradient(135deg, rgba(0, 212, 255, 0.15) 0%, rgba(183, 148, 246, 0.15) 100%);
      color: #ffffff;
      font-weight: 600;
      transform: translateY(-2px);
      border: 1px solid rgba(0, 212, 255, 0.3);
      box-shadow: 0 -2px 20px rgba(0, 212, 255, 0.2),
                  inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }

    /* 서브 탭 스타일링 */
    .sub-tabs {
      display: flex;
      margin-bottom: 20px;
      margin-top: 15px;
      gap: 8px;
      align-items: center;
    }
    .sub-tab {
      padding: 8px 20px;
      cursor: pointer;
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 100px;
      background: rgba(255, 255, 255, 0.02);
      margin-right: 0;
      font-size: 0.85em;
      font-weight: 500;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      backdrop-filter: blur(10px);
    }
    .sub-tab:hover {
      background: rgba(0, 212, 255, 0.08);
      border-color: rgba(0, 212, 255, 0.3);
      transform: translateY(-1px) scale(1.02);
      box-shadow: 0 4px 12px rgba(0, 212, 255, 0.15);
    }
    .sub-tab.active {
      background: linear-gradient(135deg, rgba(0, 212, 255, 0.2) 0%, rgba(183, 148, 246, 0.2) 100%);
      color: #00d4ff;
      font-weight: 600;
      border-color: rgba(0, 212, 255, 0.4);
      box-shadow: 0 0 20px rgba(0, 212, 255, 0.2),
                  inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }

    .tab-content {
      display: none;
      animation: fadeIn 0.5s;
    }
    .tab-content.active {
      display: block;
    }

    .sub-tab-content {
      display: none;
      animation: fadeIn 0.5s;
    }
    .sub-tab-content.active {
      display: block;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    /* 귀여운 아이콘들 */
    .heart-icon {
      color: #ff4081;
      margin-right: 5px;
    }

    .date-selector {
      display: flex;
      align-items: center;
      margin: 15px 0;
      gap: 10px;
    }

    .date-selector input[type="date"] {
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 5px;
    }

    .fetch-btn {
      padding: 10px 24px;
      background: linear-gradient(135deg, #00d4ff 0%, #b794f6 100%);
      color: white;
      border: none;
      border-radius: 100px;
      cursor: pointer;
      font-weight: 600;
      font-size: 0.9em;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 4px 15px rgba(0, 212, 255, 0.3);
      position: relative;
      overflow: hidden;
    }

    .fetch-btn:hover {
      transform: translateY(-2px) scale(1.05);
      box-shadow: 0 6px 25px rgba(0, 212, 255, 0.4);
    }
    .fetch-btn::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.2);
      transform: translate(-50%, -50%);
      transition: width 0.6s, height 0.6s;
    }
    .fetch-btn:active::before {
      width: 300px;
      height: 300px;
    }

    .auto-update-check {
      margin-left: 15px;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .category-icon {
      color: #9C27B0;
      margin-right: 5px;
    }

    /* 동기화 버튼 스타일 */
    .sync-button {
      background: linear-gradient(135deg, #b794f6 0%, #9f7aea 100%);
      color: white;
      border: 1px solid rgba(183, 148, 246, 0.3);
      padding: 10px 24px;
      border-radius: 100px;
      cursor: pointer;
      font-size: 0.9em;
      font-weight: 600;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      display: flex;
      align-items: center;
      margin-left: auto;
      gap: 6px;
      box-shadow: 0 4px 15px rgba(183, 148, 246, 0.3);
      backdrop-filter: blur(10px);
    }

    .sync-button:hover {
      background: linear-gradient(135deg, #d6b4fc 0%, #b794f6 100%);
      transform: translateY(-2px) scale(1.02);
      box-shadow: 0 6px 20px rgba(183, 148, 246, 0.4);
      border-color: rgba(183, 148, 246, 0.5);
    }

    /* 동기화 상태 알림 배너 */
    .sync-banner {
      background: linear-gradient(135deg, rgba(183, 148, 246, 0.15) 0%, rgba(0, 212, 255, 0.15) 100%);
      color: #b794f6;
      padding: 12px 20px;
      border-radius: 10px;
      margin: 15px 0;
      display: none;
      align-items: center;
      text-align: center;
      font-weight: 600;
      font-size: 0.9em;
      border: 1px solid rgba(183, 148, 246, 0.3);
      backdrop-filter: blur(10px);
    }

    .sync-banner.visible {
      display: flex;
      justify-content: center;
    }

    .sync-button-icon {
      margin-right: 5px;
    }

    .full-sync-button {
      background: linear-gradient(135deg, #ff006e 0%, #ff4458 100%);
      margin-left: 10px;
      border: 1px solid rgba(255, 0, 110, 0.3);
    }

    .full-sync-button:hover {
      background: linear-gradient(135deg, #ff4081 0%, #ff006e 100%);
      box-shadow: 0 6px 20px rgba(255, 0, 110, 0.4);
      border-color: rgba(255, 0, 110, 0.5);
    }

    /* 카테고리 필터 스타일 */
    .category-filter-container {
      display: none;
      align-items: center;
      gap: 10px;
      margin-left: 15px;
    }

    .category-filter-container.visible {
      display: flex;
    }
    
    /* 처음 로드시 전체 제목 탭의 드롭다운 표시 */
    #today-full-category-filter {
      display: flex;
    }
    
    #custom-date-full-category-filter {
      display: flex;
    }

    .category-dropdown {
      padding: 8px 20px;
      border: 1px solid rgba(183, 148, 246, 0.3);
      border-radius: 100px;
      background: rgba(255, 255, 255, 0.02);
      color: #b794f6;
      font-weight: 600;
      cursor: pointer;
      font-size: 0.85em;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      min-width: 150px;
      backdrop-filter: blur(10px);
    }
    .category-dropdown option {
      background: #1a1a1a;
      color: #e4e4e7;
    }

    .category-dropdown:hover {
      background: rgba(183, 148, 246, 0.1);
      border-color: rgba(183, 148, 246, 0.5);
      box-shadow: 0 0 15px rgba(183, 148, 246, 0.2);
    }

    .category-dropdown:focus {
      outline: none;
      box-shadow: 0 0 0 2px rgba(183, 148, 246, 0.4);
      border-color: rgba(183, 148, 246, 0.6);
    }

    .category-label {
      color: #b794f6;
      font-weight: 600;
      font-size: 0.85em;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    /* 기간 비교 모드 스타일 */
    .period-comparison-container {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      align-items: center;
    }

    .period-box {
      flex: 1;
      padding: 15px;
      border: 2px solid #e0e0e0;
      border-radius: 10px;
      background-color: #f9f9f9;
    }

    .period-box.period-a {
      border-color: rgba(33, 150, 243, 0.5);
      background: rgba(33, 150, 243, 0.15);
    }
    .period-box.period-a:hover {
      border-color: rgba(33, 150, 243, 0.7);
      box-shadow: 0 0 20px rgba(33, 150, 243, 0.3);
    }

    .period-box.period-b {
      border-color: rgba(255, 152, 0, 0.5);
      background: rgba(255, 152, 0, 0.15);
    }
    .period-box.period-b:hover {
      border-color: rgba(255, 152, 0, 0.7);
      box-shadow: 0 0 20px rgba(255, 152, 0, 0.3);
    }

    .period-title {
      font-weight: bold;
      font-size: 1.1em;
      margin-bottom: 10px;
      color: #ffffff;
    }

    .vs-symbol {
      font-size: 1.5em;
      font-weight: bold;
      color: #666;
    }

    .compare-btn {
      padding: 12px 28px;
      background: linear-gradient(135deg, #00d4ff 0%, #b794f6 100%);
      color: white;
      border: none;
      border-radius: 100px;
      cursor: pointer;
      font-size: 0.95em;
      font-weight: 600;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      margin-left: 20px;
      box-shadow: 0 4px 20px rgba(0, 212, 255, 0.3);
    }

    .compare-btn:hover {
      background-color: #7B1FA2;
      transform: translateY(-2px);
      box-shadow: 0 5px 10px rgba(156, 39, 176, 0.3);
    }

    .increase {
      color: #10b981;
      font-weight: 600;
      text-shadow: 0 0 10px rgba(16, 185, 129, 0.3);
    }

    .decrease {
      color: #ef4444;
      font-weight: 600;
      text-shadow: 0 0 10px rgba(239, 68, 68, 0.3);
    }

    .unchanged {
      color: #6b7280;
      opacity: 0.7;
    }

    .change-badge {
      display: inline-block;
      padding: 3px 10px;
      border-radius: 100px;
      font-size: 0.75em;
      margin-left: 8px;
      font-weight: 600;
      letter-spacing: 0.3px;
    }

    .change-badge.increase {
      background: rgba(16, 185, 129, 0.15);
      color: #10b981;
      border: 1px solid rgba(16, 185, 129, 0.3);
    }

    .change-badge.decrease {
      background: rgba(239, 68, 68, 0.15);
      color: #ef4444;
      border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .smart-filter {
      display: flex;
      gap: 10px;
      margin-bottom: 15px;
      flex-wrap: wrap;
    }

    .filter-btn {
      padding: 6px 15px;
      border: 1px solid #ddd;
      border-radius: 20px;
      background-color: white;
      cursor: pointer;
      font-size: 0.9em;
      transition: all 0.2s;
    }

    .filter-btn:hover {
      background-color: #f5f5f5;
      border-color: #9C27B0;
    }

    .filter-btn.active {
      background-color: #9C27B0;
      color: white;
      border-color: #9C27B0;
    }

    .expandable-row {
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .expandable-row:hover {
      background: rgba(255, 255, 255, 0.02);
      transform: scale(1.002);
    }

    .detail-row {
      display: none;
      background: rgba(0, 0, 0, 0.2);
      border-left: 2px solid rgba(0, 212, 255, 0.3);
    }

    .detail-row.visible {
      display: table-row;
    }

    .detail-content {
      padding: 10px 20px;
    }

    /* 빠른 날짜 선택 버튼 스타일 */
    .quick-date-buttons {
      display: flex;
      gap: 8px;
      margin-top: 10px;
      flex-wrap: wrap;
    }

    .quick-date-btn {
      padding: 5px 12px;
      border: 1px solid #ddd;
      border-radius: 15px;
      background-color: white;
      cursor: pointer;
      font-size: 0.85em;
      transition: all 0.2s;
    }

    .quick-date-btn:hover {
      background-color: #E1BEE7;
      border-color: #9C27B0;
      color: #6A1B9A;
    }

    .quick-date-label {
      font-size: 0.85em;
      color: #b8b8bc;
      font-weight: 600;
      display: inline-block;
      margin-right: 10px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    /* X 닫기 버튼 스타일 */
    .close-button {
      float: right;
      font-size: 1.5em;
      font-weight: 300;
      color: #ffffff;
      cursor: pointer;
      padding: 0 10px;
      line-height: 1;
      transition: all 0.2s ease;
      opacity: 0.8;
    }

    .close-button:hover {
      color: #ff006e;
      opacity: 1;
      transform: rotate(90deg);
    }

    .dashboard-title-with-close {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    /* 스크롤바 스타일링 */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }
    ::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.02);
      border-radius: 4px;
    }
    ::-webkit-scrollbar-thumb {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 4px;
      transition: background 0.3s ease;
    }
    ::-webkit-scrollbar-thumb:hover {
      background: rgba(0, 212, 255, 0.3);
    }

    /* 애니메이션 추가 */
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.7; }
      100% { opacity: 1; }
    }

    @keyframes glow {
      0% { box-shadow: 0 0 5px rgba(0, 212, 255, 0.2); }
      50% { box-shadow: 0 0 20px rgba(0, 212, 255, 0.5), 0 0 30px rgba(0, 212, 255, 0.3); }
      100% { box-shadow: 0 0 5px rgba(0, 212, 255, 0.2); }
    }

    /* 로딩 애니메이션 */
    @keyframes shimmer {
      0% { background-position: -1000px 0; }
      100% { background-position: 1000px 0; }
    }

    /* 체크박스 스타일링 */
    input[type="checkbox"] {
      margin-right: 8px;
      width: 16px;
      height: 16px;
      accent-color: #00d4ff;
      cursor: pointer;
    }
    label {
      cursor: pointer;
      user-select: none;
      color: #b8b8bc;
      transition: color 0.2s ease;
    }
    label:hover {
      color: #e4e4e7;
    }


    /* 선택된 텍스트 스타일 */
    ::selection {
      background: rgba(0, 212, 255, 0.3);
      color: #ffffff;
    }
    ::-moz-selection {
      background: rgba(0, 212, 255, 0.3);
      color: #ffffff;
    }
</head>
<body>
<div class="container">
  <h1><span style="color: #e4e4e7; -webkit-text-fill-color: initial;">😎</span> 실시간 대시보드</h1>

  <!-- 메인 탭 -->
  <div class="main-tabs">
    <div class="main-tab active" onclick="showMainTab('today')">🌞 오늘 전체</div>
    <div class="main-tab" onclick="showMainTab('last30min')">⚡ 최근 30분</div>
    <div class="main-tab" onclick="showMainTab('custom-date')">📆 날짜 지정</div>
    <div class="main-tab" onclick="showMainTab('comparison')">⚔️ 기간 비교</div>
  </div>

  <!-- 오늘 전체 탭 컨텐츠 -->
  <div id="today-content" class="tab-content active">
    <div class="dashboard-box">
      <div style="display: flex; justify-content: space-between;">
        <!-- 왼쪽 구역 (빨간색 부분) -->
        <div style="width: 18%;">
          <div class="dashboard-title">🔎 오늘 전체 활성 사용자</div>
          <div class="active-users" id="today-active-users">0</div>
        </div>

        <!-- 오른쪽 구역 (주황색 부분) -->
        <div style="width: 78%;">
          <div class="dashboard-title" style="margin-top: 0;">🔢 오늘 전체 조회수</div>
          <div class="active-users" id="today-total-pageviews">0</div>
        </div>
      </div>

      <div class="update-time" id="today-update-time">마지막 업데이트: -</div>
    </div>

    <!-- 서브 탭 (오늘 전체) -->
    <div class="sub-tabs">
      <div class="sub-tab active" onclick="showSubTab('today', 'full')">📊 전체 제목</div>
      <div class="sub-tab" onclick="showSubTab('today', 'prefix1')">1️⃣ 접두어 (1단어)</div>
      <div class="sub-tab" onclick="showSubTab('today', 'prefix2')">2️⃣ 접두어 (2단어)</div>
      <div class="sub-tab" onclick="showSubTab('today', 'prefix3')">3️⃣ 접두어 (3단어)</div>
      <div class="sub-tab" onclick="showSubTab('today', 'category')">📑 카테고리별</div>
      <button class="sync-button" onclick="syncWordPressCategories(false)">
        <span class="sync-button-icon">🔄</span> 카테고리 추가 동기화
      </button>
      <button class="sync-button full-sync-button" onclick="syncWordPressCategories(true)">
        <span class="sync-button-icon">🔁</span> 카테고리 전체 초기화
      </button>
    </div>

    <!-- 전체 제목 테이블 (오늘) -->
    <div id="today-full-content" class="sub-tab-content active">
      <div class="dashboard-box">
        <div style="display: flex; align-items: center; justify-content: space-between;">
          <div class="dashboard-title">📈 페이지 제목별 조회수 (오늘)</div>
          <div class="category-filter-container" id="today-full-category-filter">
            <span class="category-label">카테고리 선택:</span>
            <select class="category-dropdown" id="today-full-category-select" onchange="filterByCategoryInFullTab('today', this.value)">
              <option value="">전체 카테고리</option>
            </select>
          </div>
        </div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>페이지 제목</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="today-page-title-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- 접두어 1단어 테이블 (오늘) -->
    <div id="today-prefix1-content" class="sub-tab-content">
      <div class="dashboard-box">
        <div class="dashboard-title">🔤 접두어별 조회수 (1단어)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>접두어</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="today-prefix1-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- 접두어 2단어 테이블 (오늘) -->
    <div id="today-prefix2-content" class="sub-tab-content">
      <div class="dashboard-box">
        <div class="dashboard-title">🔤 접두어별 조회수 (2단어)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>접두어</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="today-prefix2-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- 접두어 3단어 테이블 (오늘) -->
    <div id="today-prefix3-content" class="sub-tab-content">
      <div class="dashboard-box">
        <div class="dashboard-title">🔤 접두어별 조회수 (3단어)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>접두어</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="today-prefix3-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

    <div id="today-category-content" class="sub-tab-content">
      <div class="dashboard-box">
        <div id="sync-banner-today" class="sync-banner">🔄 아직 동기화된 카테고리 데이터가 없어요! 동기화 버튼을 눌러주세요!</div>
        <div class="dashboard-title">📑 카테고리별 조회수 (오늘)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>카테고리</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="today-category-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

  </div>


  <!-- 최근 30분 탭 컨텐츠 -->
  <div id="last30min-content" class="tab-content">
    <div class="dashboard-box">
      <div style="display: flex; justify-content: space-between;">
        <!-- 왼쪽 구역 -->
        <div style="width: 18%;">
          <div class="dashboard-title">🔥 최근 30분 활성 사용자</div>
          <div class="active-users" id="last30min-active-users">0</div>
        </div>

        <!-- 오른쪽 구역 -->
        <div style="width: 78%;">
          <div class="dashboard-title" style="margin-top: 0;">🔢 최근 30분 전체 조회수</div>
          <div class="active-users" id="last30min-total-pageviews">0</div>
        </div>
      </div>

      <div class="update-time" id="last30min-update-time">마지막 업데이트: -</div>
    </div>

    <!-- 서브 탭 (최근 30분) -->
    <div class="sub-tabs">
      <div class="sub-tab active" onclick="showSubTab('last30min', 'full')">📊 전체 제목</div>
      <div class="sub-tab" onclick="showSubTab('last30min', 'prefix1')">1️⃣ 접두어 (1단어)</div>
      <div class="sub-tab" onclick="showSubTab('last30min', 'prefix2')">2️⃣ 접두어 (2단어)</div>
      <div class="sub-tab" onclick="showSubTab('last30min', 'prefix3')">3️⃣ 접두어 (3단어)</div>
    </div>

    <!-- 전체 제목 테이블 (최근 30분) -->
    <div id="last30min-full-content" class="sub-tab-content active">
      <div class="dashboard-box">
        <div class="dashboard-title">📈 페이지 제목별 조회수 (최근 30분)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>페이지 제목</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="last30min-page-title-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- 접두어 1단어 테이블 (최근 30분) -->
    <div id="last30min-prefix1-content" class="sub-tab-content">
      <div class="dashboard-box">
        <div class="dashboard-title">🔤 접두어별 조회수 (1단어)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>접두어</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="last30min-prefix1-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- 접두어 2단어 테이블 (최근 30분) -->
    <div id="last30min-prefix2-content" class="sub-tab-content">
      <div class="dashboard-box">
        <div class="dashboard-title">🔤 접두어별 조회수 (2단어)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>접두어</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="last30min-prefix2-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- 접두어 3단어 테이블 (최근 30분) -->
    <div id="last30min-prefix3-content" class="sub-tab-content">
      <div class="dashboard-box">
        <div class="dashboard-title">🔤 접두어별 조회수 (3단어)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>접두어</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="last30min-prefix3-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- 날짜 지정 탭 컨텐츠 -->
  <div id="custom-date-content" class="tab-content">
    <div class="dashboard-box">
      <div class="date-selector">
        <input type="date" id="start-date" onchange="validateDates()">
        <span>~</span>
        <input type="date" id="end-date" onchange="validateDates()">
        <button onclick="fetchCustomDateData()" class="fetch-btn">🔍 조회하기</button>
        <div class="auto-update-check">
          <input type="checkbox" id="auto-update-check">
          <label for="auto-update-check">오늘 포함시 자동 업데이트</label>
        </div>
      </div>

      <!-- 빠른 날짜 선택 버튼 추가 -->
      <div style="margin-top: 10px; margin-bottom: 15px;">
        <span class="quick-date-label">빠른 선택:</span>
        <div class="quick-date-buttons" style="display: inline-flex; margin-left: 10px;">
          <button class="quick-date-btn" onclick="setCustomDateRange(1)">오늘</button>
          <button class="quick-date-btn" onclick="setCustomDateRange(3)">3일</button>
          <button class="quick-date-btn" onclick="setCustomDateRange(7)">7일</button>
          <button class="quick-date-btn" onclick="setCustomDateRange(14)">2주</button>
          <button class="quick-date-btn" onclick="setCustomDateRange(30)">한달</button>
        </div>
        <div style="display: inline-flex; align-items: center; margin-left: 20px;">
          <input type="checkbox" id="custom-date-exclude-today" style="margin-right: 5px;">
          <label for="custom-date-exclude-today" style="font-size: 0.85em; color: #666; cursor: pointer;">
            📅 전일 기준 (오늘 제외)
          </label>
        </div>
      </div>

      <div style="display: flex; justify-content: space-between; margin-top: 15px;">
        <!-- 왼쪽 구역 -->
        <div style="width: 18%;">
          <div class="dashboard-title">📅 지정 기간 활성 사용자</div>
          <div class="active-users" id="custom-date-active-users">0</div>
        </div>

        <!-- 오른쪽 구역 -->
        <div style="width: 78%;">
          <div class="dashboard-title" style="margin-top: 0;">🔢 지정 기간 전체 조회수</div>
          <div class="active-users" id="custom-date-total-pageviews">0</div>
        </div>
      </div>

      <div class="update-time" id="custom-date-update-time">마지막 업데이트: -</div>
    </div>

    <!-- 서브 탭 (날짜 지정) -->
    <div class="sub-tabs">
      <div class="sub-tab active" onclick="showSubTab('custom-date', 'full')">📊 전체 제목</div>
      <div class="sub-tab" onclick="showSubTab('custom-date', 'prefix1')">1️⃣ 접두어 (1단어)</div>
      <div class="sub-tab" onclick="showSubTab('custom-date', 'prefix2')">2️⃣ 접두어 (2단어)</div>
      <div class="sub-tab" onclick="showSubTab('custom-date', 'prefix3')">3️⃣ 접두어 (3단어)</div>
      <div class="sub-tab" onclick="showSubTab('custom-date', 'category')">📑 카테고리별</div>
    </div>

    <!-- 전체 제목 테이블 (날짜 지정) -->
    <div id="custom-date-full-content" class="sub-tab-content active">
      <div class="dashboard-box">
        <div style="display: flex; align-items: center; justify-content: space-between;">
          <div class="dashboard-title">📈 페이지 제목별 조회수 (지정 기간)</div>
          <div class="category-filter-container" id="custom-date-full-category-filter">
            <span class="category-label">카테고리 선택:</span>
            <select class="category-dropdown" id="custom-date-full-category-select" onchange="filterByCategoryInFullTab('custom-date', this.value)">
              <option value="">전체 카테고리</option>
            </select>
          </div>
        </div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>페이지 제목</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="custom-date-page-title-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- 접두어 1단어 테이블 (날짜 지정) -->
    <div id="custom-date-prefix1-content" class="sub-tab-content">
      <div class="dashboard-box">
        <div class="dashboard-title">🔤 접두어별 조회수 (1단어)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>접두어</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="custom-date-prefix1-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- 접두어 2단어 테이블 (날짜 지정) -->
    <div id="custom-date-prefix2-content" class="sub-tab-content">
      <div class="dashboard-box">
        <div class="dashboard-title">🔤 접두어별 조회수 (2단어)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>접두어</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="custom-date-prefix2-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- 접두어 3단어 테이블 (날짜 지정) -->
    <div id="custom-date-prefix3-content" class="sub-tab-content">
      <div class="dashboard-box">
        <div class="dashboard-title">🔤 접두어별 조회수 (3단어)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>접두어</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="custom-date-prefix3-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- 카테고리별 테이블 (날짜 지정) 추가 -->
    <div id="custom-date-category-content" class="sub-tab-content">
      <div class="dashboard-box">
        <div id="sync-banner-custom-date" class="sync-banner">🔄 아직 동기화된 카테고리 데이터가 없어요! 동기화 버튼을 눌러주세요!</div>
        <div class="dashboard-title">📑 카테고리별 조회수 (지정 기간)</div>
        <table>
          <thead>
          <tr>
            <th>순번</th>
            <th>카테고리</th>
            <th>조회수</th>
            <th>비율</th>
          </tr>
          </thead>
          <tbody id="custom-date-category-views">
          <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
          </tbody>
        </table>
      </div>
    </div>

  </div>

  <!-- 기간 비교 탭 컨텐츠 -->
  <div id="comparison-content" class="tab-content">
      <div class="dashboard-box">
        <div class="dashboard-title"><span style="color: #e4e4e7; -webkit-text-fill-color: initial;">⚔️</span> 기간 비교 분석</div>
        <div style="font-size: 0.9em; color: #666; margin-top: 5px; margin-bottom: 15px;">
          📌 기간 A(이전)에서 기간 B(최근)로의 변화를 분석해요! 상승/하락 트렌드를 한눈에 확인하세요.
        </div>
        
        <!-- 기간 선택 UI -->
        <div class="period-comparison-container">
          <div class="period-box period-a">
            <div class="period-title">📅 기간 A (이전)</div>
            <input type="date" id="period-a-start" onchange="validatePeriodDates('a')">
            <span>~</span>
            <input type="date" id="period-a-end" onchange="validatePeriodDates('a')">
          </div>
          
          <div class="vs-symbol">⚔️</div>
          
          <div class="period-box period-b">
            <div class="period-title">📅 기간 B (최근)</div>
            <input type="date" id="period-b-start" onchange="validatePeriodDates('b')">
            <span>~</span>
            <input type="date" id="period-b-end" onchange="validatePeriodDates('b')">
          </div>
          
          <button onclick="fetchComparisonData()" class="compare-btn">🔍 비교하기</button>
        </div>

        <!-- 빠른 날짜 선택 버튼 -->
        <div style="margin-top: 15px; margin-bottom: 20px;">
          <span class="quick-date-label">빠른 선택:</span>
          <div class="quick-date-buttons" style="display: inline-flex; margin-left: 10px;">
            <button class="quick-date-btn" onclick="setQuickDateRange(1)">오늘</button>
            <button class="quick-date-btn" onclick="setQuickDateRange(3)">3일</button>
            <button class="quick-date-btn" onclick="setQuickDateRange(7)">7일</button>
            <button class="quick-date-btn" onclick="setQuickDateRange(14)">2주</button>
            <button class="quick-date-btn" onclick="setQuickDateRange(30)">한달</button>
          </div>
          <div style="display: inline-flex; align-items: center; margin-left: 20px;">
            <input type="checkbox" id="exclude-today-check" style="margin-right: 5px;" checked>
            <label for="exclude-today-check" style="font-size: 0.85em; color: #666; cursor: pointer;">
              📅 전일 기준 (오늘 제외)
            </label>
          </div>
        </div>

        <!-- 스마트 필터 -->
        <div class="smart-filter" id="comparison-filters">
          <button class="filter-btn active" onclick="applyComparisonFilter('all')">전체 보기</button>
          <button class="filter-btn" onclick="applyComparisonFilter('top-increase')">🔥 TOP 25 상승</button>
          <button class="filter-btn" onclick="applyComparisonFilter('top-decrease')">💧 TOP 25 하락</button>
          <button class="filter-btn" onclick="applyComparisonFilter('rapid-growth')">🚀 급상승 (100%↑)</button>
        </div>

        <!-- 카테고리별 비교 테이블 -->
        <div class="dashboard-box" style="margin-top: 20px;">
          <div class="dashboard-title">📊 카테고리별 비교</div>
          <table>
            <thead>
            <tr>
              <th>순번</th>
              <th>카테고리</th>
              <th>기간 A</th>
              <th>기간 B</th>
              <th>변화량</th>
              <th>변화율</th>
              <th>기간 A 비중</th>
              <th>기간 B 비중</th>
            </tr>
            </thead>
            <tbody id="comparison-category-table">
            <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
            </tbody>
          </table>
        </div>

        <!-- 상세 포스트 비교 (카테고리 클릭시 표시) -->
        <div id="comparison-post-detail" class="dashboard-box" style="margin-top: 20px; display: none;">
          <div class="dashboard-title-with-close">
            <div class="dashboard-title" id="comparison-post-detail-title">📈 포스트별 상세 비교</div>
            <span class="close-button" onclick="closeComparisonDetail()">×</span>
          </div>
          <table>
            <thead>
            <tr>
              <th>순번</th>
              <th>포스트 제목</th>
              <th>기간 A</th>
              <th>기간 B</th>
              <th>변화량</th>
              <th>변화율</th>
            </tr>
            </thead>
            <tbody id="comparison-post-table">
            <!-- 여기에 데이터가 동적으로 삽입됩니다 -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let todayIntervalId = null;
  let last30minIntervalId = null;
  let wpCategoryData = null; // 워드프레스 카테고리 데이터 저장
  let currentPageViewsData = {}; // 현재 페이지뷰 데이터 저장

  // 페이지 로드시 처음 데이터 가져오기
  document.addEventListener('DOMContentLoaded', function() {
    // 페이지 로드 시 첫 번째 탭(오늘 전체) 활성화
    fetchTodayData();
    startTodayInterval();

    // 날짜 선택기 초기화 (기존 코드 유지)
    const now = new Date();
    const today = now.getFullYear() + '-' +
        String(now.getMonth() + 1).padStart(2, '0') + '-' +
        String(now.getDate()).padStart(2, '0');

    document.getElementById('start-date').value = today;
    document.getElementById('end-date').value = today;

    document.getElementById('auto-update-check').addEventListener('change', function() {
      if (this.checked && document.getElementById('end-date').value === today) {
        fetchCustomDateData();
      }
    });

    // 동기화 상태 확인
    checkSyncStatus();
    
    // 워드프레스 카테고리 데이터 로드
    loadWpCategoryData();
  });

  // 오늘 데이터 인터벌 시작 함수
  function startTodayInterval() {
    if (todayIntervalId === null) {
      todayIntervalId = setInterval(fetchTodayData, 30000); // 30초로 변경!
    }
  }

  // 오늘 데이터 인터벌 중지 함수
  function stopTodayInterval() {
    if (todayIntervalId !== null) {
      clearInterval(todayIntervalId);
      todayIntervalId = null;
    }
  }

  // 최근 30분 데이터 인터벌 시작 함수
  function startLast30minInterval() {
    if (last30minIntervalId === null) {
      fetchLast30MinData(); // 먼저 한 번 호출
      last30minIntervalId = setInterval(fetchLast30MinData, 30000); // 30초로 변경!
    }
  }

  // 최근 30분 데이터 인터벌 중지 함수
  function stopLast30minInterval() {
    if (last30minIntervalId !== null) {
      clearInterval(last30minIntervalId);
      last30minIntervalId = null;
    }
  }

  // 동기화 상태 확인 함수
  function checkSyncStatus() {
    fetch('/api/realtime-pageviews')
    .then(response => response.json())
    .then(data => {
      const hasCategories = data.categoryViews && Object.keys(data.categoryViews).length > 0;

      // 각 탭의 배너 표시/숨김 설정
      const todayBanner = document.getElementById('sync-banner-today');
      const customDateBanner = document.getElementById('sync-banner-custom-date');
      
      if (todayBanner) {
        todayBanner.classList.toggle('visible', !hasCategories);
      }
      // last30min 탭에는 카테고리 기능이 없으므로 제거
      if (customDateBanner) {
        customDateBanner.classList.toggle('visible', !hasCategories);
      }
    })
    .catch(error => console.error('동기화 상태 확인 실패:', error));
  }

  // 카테고리별 조회수 테이블 업데이트
  function updateCategoryViewsTable(categoryViews, tableId) {
    const tableBody = document.getElementById(tableId);
    tableBody.innerHTML = '';

    // 동기화 배너 표시 여부 설정
    const mainTab = tableId.split('-')[0]; // "today", "last30min" 또는 "custom-date" 추출
    const bannerId = "sync-banner-" + mainTab;
    const syncBanner = document.getElementById(bannerId);

    if (!categoryViews || Object.keys(categoryViews).length === 0) {
      if (syncBanner) {
        syncBanner.classList.add('visible');
      } else {
        console.warn(`찾을 수 없는 배너야! ID: "${bannerId}"`);
      }

      const row = document.createElement('tr');
      const cell = document.createElement('td');
      cell.setAttribute('colspan', '3');
      cell.textContent = '데이터가 없거나 아직 카테고리가 동기화되지 않았어요! 🥺';
      cell.style.textAlign = 'center';
      row.appendChild(cell);
      tableBody.appendChild(row);
      return;
    }

    // 데이터가 있으면 배너 숨기기
    if (syncBanner) {
      syncBanner.classList.remove('visible');
    }

    // 카테고리별 포스트 개수 계산
    const categoryPostCounts = {};
    if (wpCategoryData && wpCategoryData.posts && wpCategoryData.categories) {
      // 각 포스트가 속한 카테고리를 순회하면서 카운트
      Object.entries(wpCategoryData.posts).forEach(([postId, categoryIds]) => {
        if (categoryIds && Array.isArray(categoryIds)) {
          categoryIds.forEach(catId => {
            const categoryName = wpCategoryData.categories[catId];
            if (categoryName) {
              categoryPostCounts[categoryName] = (categoryPostCounts[categoryName] || 0) + 1;
            }
          });
        }
      });
    }

    // 총 조회수 계산
    const totalViews = Object.values(categoryViews).reduce((sum, views) => sum + views, 0);

    // 배열로 변환하여 정렬 (조회수 기준 내림차순)
    const sortedCategories = Object.entries(categoryViews)
    .sort((a, b) => b[1] - a[1]);

    // 테이블에 데이터 추가
    sortedCategories.forEach(([category, views], index) => {
      const row = document.createElement('tr');

      // 순번 셀
      const numCell = document.createElement('td');
      numCell.textContent = index + 1; // 1부터 시작하는 순번
      row.appendChild(numCell);

      // 카테고리 셀 (포스트 개수 포함)
      const categoryCell = document.createElement('td');
      const postCount = categoryPostCounts[category] || 0;
      categoryCell.textContent = `${category} (${postCount})`;
      row.appendChild(categoryCell);

      // 조회수 셀
      const viewsCell = document.createElement('td');
      viewsCell.textContent = Math.round(views);
      row.appendChild(viewsCell);

      // 비율 셀 (프로그레스 바)
      const ratioCell = document.createElement('td');
      const percentage = totalViews > 0 ? (views / totalViews * 100) : 0;

      const progressContainer = document.createElement('div');
      progressContainer.style.display = 'flex';
      progressContainer.style.alignItems = 'center';

      const progressBar = document.createElement('div');
      progressBar.className = 'progress-bar';
      progressBar.style.width = '100px';

      const progressValue = document.createElement('div');
      progressValue.className = 'progress-value';
      progressValue.style.width = `${percentage}%`;
      progressValue.style.background = 'linear-gradient(90deg, #b794f6 0%, #9f7aea 100%)'; // 카테고리는 보라색 그라디언트

      const percentText = document.createElement('span');
      percentText.textContent = `${percentage.toFixed(1)}%`;

      progressBar.appendChild(progressValue);
      progressContainer.appendChild(progressBar);
      progressContainer.appendChild(percentText);
      ratioCell.appendChild(progressContainer);

      row.appendChild(ratioCell);
      tableBody.appendChild(row);
    });
  }

  // 메인 탭 전환 함수
  function showMainTab(tabName) {
    // 모든 메인 탭과 탭 컨텐츠를 비활성화
    document.querySelectorAll('.main-tab').forEach(tab => {
      tab.classList.remove('active');
    });
    document.querySelectorAll('.tab-content').forEach(content => {
      content.classList.remove('active');
    });

    // 일단 모든 인터벌 중지
    stopTodayInterval();
    stopLast30minInterval();

    // 선택한 메인 탭과 해당 컨텐츠를 활성화
    if (tabName === 'today') {
      document.querySelector('.main-tab:nth-child(1)').classList.add('active');
      document.getElementById('today-content').classList.add('active');
      fetchTodayData(); // 탭 전환 시 즉시 데이터 가져오기
      startTodayInterval(); // 오늘 데이터만 주기적으로 가져오기
    } else if (tabName === 'last30min') {
      document.querySelector('.main-tab:nth-child(2)').classList.add('active');
      document.getElementById('last30min-content').classList.add('active');
      startLast30minInterval(); // 최근 30분 데이터만 주기적으로 가져오기
    } else if (tabName === 'custom-date') {
      document.querySelector('.main-tab:nth-child(3)').classList.add('active');
      document.getElementById('custom-date-content').classList.add('active');

      // 오늘 포함시 자동 업데이트
      const autoUpdateCheck = document.getElementById('auto-update-check');
      if (autoUpdateCheck && autoUpdateCheck.checked) {
        const endDate = document.getElementById('end-date').value;
        const now = new Date();
        const today = now.getFullYear() + '-' +
            String(now.getMonth() + 1).padStart(2, '0') + '-' +
            String(now.getDate()).padStart(2, '0');

        if (endDate === today) {
          // 데이터 가져오기
          fetchCustomDateData();
          // 30초마다 자동 업데이트
          customDateIntervalId = setInterval(fetchCustomDateData, 30000);
        }
      }
    } else if (tabName === 'comparison') {
      document.querySelector('.main-tab:nth-child(4)').classList.add('active');
      document.getElementById('comparison-content').classList.add('active');
    }
  }

  // 서브 탭 전환 함수
  function showSubTab(mainTab, subTab) {
    // 해당 메인 탭 내의 모든 서브 탭과 서브 탭 컨텐츠를 비활성화
    const subTabs = document.querySelectorAll(`#${mainTab}-content .sub-tab`);
    const subContents = document.querySelectorAll(`#${mainTab}-content .sub-tab-content`);

    subTabs.forEach(tab => {
      tab.classList.remove('active');
    });
    subContents.forEach(content => {
      content.classList.remove('active');
    });

    // 선택한 서브 탭 활성화 (indexOf로 찾기)
    const tabTypes = ['full', 'prefix1', 'prefix2', 'prefix3', 'category'];
    const tabIndex = tabTypes.indexOf(subTab);
    if (tabIndex >= 0) {
      subTabs[tabIndex].classList.add('active');
      document.getElementById(`${mainTab}-${subTab}-content`).classList.add('active');
    }
    
    // 전체 제목 탭의 카테고리 필터 드롭다운 표시/숨김
    const fullCategoryFilter = document.getElementById(`${mainTab}-full-category-filter`);
    if (fullCategoryFilter) {
      if (subTab === 'full') {
        fullCategoryFilter.classList.add('visible');
      } else {
        fullCategoryFilter.classList.remove('visible');
      }
    }
  }

  function fetchTodayData() {
    fetch('/api/realtime-pageviews')
    .then(response => response.json())
    .then(data => {
      // 데이터 저장
      currentPageViewsData.today = data.pageViews;
      
      // 활성 사용자 및 전체 페이지뷰 업데이트
      document.getElementById('today-active-users').textContent = data.activeUsers;

      // 전체 조회수 계산 및 표시
      const totalPageViews = data.pageViews.reduce((sum, item) => sum + item.pageViews, 0);
      document.getElementById('today-total-pageviews').textContent = Math.round(totalPageViews);

      updateTime('today-update-time');

      // 현재 활성화된 서브탭 확인
      const activeSubTab = document.querySelector('#today-content .sub-tab.active');
      const isFullTabActive = activeSubTab && activeSubTab.textContent.includes('전체 제목');
      
      // 카테고리 필터 상태 확인
      const selectedCategory = document.getElementById('today-full-category-select')?.value;
      
      // 전체 제목 탭이 활성화되어 있고 카테고리가 선택되어 있으면 필터링된 데이터 표시
      if (isFullTabActive && selectedCategory) {
        // 필터링 적용
        filterByCategoryInFullTab('today', selectedCategory);
      } else {
        // 필터링이 없으면 전체 데이터 표시
        updatePageViewsTable(data.pageViews, 'today-page-title-views');
      }

      // 접두어별 테이블 업데이트
      updatePrefixViewsTable(data.pageViews, 'today-prefix1-views', 1);
      updatePrefixViewsTable(data.pageViews, 'today-prefix2-views', 2);
      updatePrefixViewsTable(data.pageViews, 'today-prefix3-views', 3);

      // 카테고리별 테이블 업데이트
      updateCategoryViewsTable(data.categoryViews, 'today-category-views');
    })
    .catch(error => console.error('오늘 데이터 가져오기 실패:', error));
  }

  function fetchLast30MinData() {
    fetch('/api/last30min-pageviews')
    .then(response => response.json())
    .then(data => {
      // 활성 사용자 및 전체 페이지뷰 업데이트
      document.getElementById('last30min-active-users').textContent = data.activeUsers;

      // 전체 조회수 계산 및 표시
      const totalPageViews = data.pageViews.reduce((sum, item) => sum + item.pageViews, 0);
      document.getElementById('last30min-total-pageviews').textContent = Math.round(totalPageViews);

      updateTime('last30min-update-time');

      // 전체 테이블 업데이트
      updatePageViewsTable(data.pageViews, 'last30min-page-title-views');

      // 접두어별 테이블 업데이트
      updatePrefixViewsTable(data.pageViews, 'last30min-prefix1-views', 1);
      updatePrefixViewsTable(data.pageViews, 'last30min-prefix2-views', 2);
      updatePrefixViewsTable(data.pageViews, 'last30min-prefix3-views', 3);
    })
    .catch(error => console.error('최근 30분 데이터 가져오기 실패:', error));
  }

  // 전체 페이지 제목별 조회수 테이블 업데이트
  function updatePageViewsTable(data, tableId) {
    const tableBody = document.getElementById(tableId);
    tableBody.innerHTML = '';

    // 총 조회수 계산
    const totalViews = data.reduce((sum, item) => sum + item.pageViews, 0);

    // 데이터 정렬 (조회수 기준 내림차순)
    data.sort((a, b) => b.pageViews - a.pageViews);

    // 테이블에 데이터 추가
    data.forEach((item, index) => {
      const row = document.createElement('tr');

      // 순번 셀
      const numCell = document.createElement('td');
      numCell.textContent = index + 1;  // 1부터 시작!
      row.appendChild(numCell);

      // 페이지 제목 셀
      const titleCell = document.createElement('td');
      titleCell.textContent = item.pageTitle || '(제목 없음)';
      row.appendChild(titleCell);

      // 조회수 셀
      const viewsCell = document.createElement('td');
      viewsCell.textContent = Math.round(item.pageViews);
      row.appendChild(viewsCell);

      // 비율 셀 (프로그레스 바)
      const ratioCell = document.createElement('td');
      const percentage = totalViews > 0 ? (item.pageViews / totalViews * 100) : 0;

      const progressContainer = document.createElement('div');
      progressContainer.style.display = 'flex';
      progressContainer.style.alignItems = 'center';

      const progressBar = document.createElement('div');
      progressBar.className = 'progress-bar';
      progressBar.style.width = '100px';

      const progressValue = document.createElement('div');
      progressValue.className = 'progress-value';
      progressValue.style.width = `${percentage}%`;

      const percentText = document.createElement('span');
      percentText.textContent = `${percentage.toFixed(1)}%`;

      progressBar.appendChild(progressValue);
      progressContainer.appendChild(progressBar);
      progressContainer.appendChild(percentText);
      ratioCell.appendChild(progressContainer);

      row.appendChild(ratioCell);
      tableBody.appendChild(row);
    });
  }

  // 접두어(Prefix)별 조회수 테이블 업데이트
  function updatePrefixViewsTable(data, tableId, wordCount) {
    const tableBody = document.getElementById(tableId);
    tableBody.innerHTML = '';

    // 페이지 제목을 접두어로 그룹화
    const prefixGroups = groupByPrefix(data, wordCount);

    // 총 조회수 계산
    const totalViews = data.reduce((sum, item) => sum + item.pageViews, 0);

    // 정렬된 접두어 배열 (조회수 기준 내림차순)
    const sortedPrefixes = Object.keys(prefixGroups).sort((a, b) => {
      const sumA = prefixGroups[a].reduce((sum, item) => sum + item.pageViews, 0);
      const sumB = prefixGroups[b].reduce((sum, item) => sum + item.pageViews, 0);
      return sumB - sumA;
    });

    // 테이블에 데이터 추가
    sortedPrefixes.forEach((prefix, index) => {
      const items = prefixGroups[prefix];
      const prefixTotalViews = items.reduce((sum, item) => sum + item.pageViews, 0);

      const row = document.createElement('tr');

      // 순번 셀 추가
      const numCell = document.createElement('td');
      numCell.textContent = index + 1;  // 1부터 시작!
      row.appendChild(numCell);

      // 접두어 셀
      const prefixCell = document.createElement('td');
      prefixCell.textContent = prefix;
      row.appendChild(prefixCell);

      // 조회수 셀
      const viewsCell = document.createElement('td');
      viewsCell.textContent = Math.round(prefixTotalViews);
      row.appendChild(viewsCell);

      // 비율 셀 (프로그레스 바)
      const ratioCell = document.createElement('td');
      const percentage = totalViews > 0 ? (prefixTotalViews / totalViews * 100) : 0;

      const progressContainer = document.createElement('div');
      progressContainer.style.display = 'flex';
      progressContainer.style.alignItems = 'center';

      const progressBar = document.createElement('div');
      progressBar.className = 'progress-bar';
      progressBar.style.width = '100px';

      const progressValue = document.createElement('div');
      progressValue.className = 'progress-value';
      progressValue.style.width = `${percentage}%`;

      const percentText = document.createElement('span');
      percentText.textContent = `${percentage.toFixed(1)}%`;

      progressBar.appendChild(progressValue);
      progressContainer.appendChild(progressBar);
      progressContainer.appendChild(percentText);
      ratioCell.appendChild(progressContainer);

      row.appendChild(ratioCell);
      tableBody.appendChild(row);
    });
  }

  // 페이지 제목을 접두어로 그룹화하는 함수
  function groupByPrefix(data, wordCount) {
    const groups = {};

    data.forEach(item => {
      const title = (item.pageTitle || '(제목 없음)').toLowerCase();
      const words = title.split(' ');

      let prefix;
      if (wordCount === 1) {
        prefix = words.length > 0 ? words[0] : '';
      } else if (words.length >= wordCount) {
        prefix = words.slice(0, wordCount).join(' ');
      } else {
        prefix = title; // 단어 수가 부족한 경우 전체 제목을 사용
      }

      if (prefix) {
        if (!groups[prefix]) {
          groups[prefix] = [];
        }
        groups[prefix].push(item);
      }
    });

    return groups;
  }

  function updateTime(elementId) {
    const now = new Date();
    const timeString = now.toLocaleTimeString();
    document.getElementById(elementId).textContent = `마지막 업데이트: ${timeString}`;
  }

  // 날짜 유효성 검사
  function validateDates() {
    const startDate = document.getElementById('start-date').value;
    const endDate = document.getElementById('end-date').value;

    if (startDate && endDate && new Date(startDate) > new Date(endDate)) {
      alert('🚨 시작일이 종료일보다 늦을 수 없어요!');
      document.getElementById('end-date').value = startDate;
    }
  }

  // 날짜 지정 데이터 가져오기
  function fetchCustomDateData() {
    const startDate = document.getElementById('start-date').value;
    const endDate = document.getElementById('end-date').value;

    if (!startDate || !endDate) {
      alert('❓ 시작일과 종료일을 모두 선택해주세요!');
      return;
    }

    // API 요청
    fetch(`/api/custom-date-pageviews?startDate=${startDate}&endDate=${endDate}`)
    .then(response => response.json())
    .then(data => {
      // 데이터 저장
      currentPageViewsData.customDate = data.pageViews;
      
      // 활성 사용자 업데이트
      document.getElementById('custom-date-active-users').textContent = data.activeUsers;

      // 전체 조회수 계산 및 표시
      const totalPageViews = data.pageViews.reduce((sum, item) => sum + item.pageViews, 0);
      document.getElementById('custom-date-total-pageviews').textContent = Math.round(totalPageViews);

      updateTime('custom-date-update-time');

      // 현재 활성화된 서브탭 확인
      const activeSubTab = document.querySelector('#custom-date-content .sub-tab.active');
      const isFullTabActive = activeSubTab && activeSubTab.textContent.includes('전체 제목');
      
      // 카테고리 필터 상태 확인
      const selectedCategory = document.getElementById('custom-date-full-category-select')?.value;
      
      // 전체 제목 탭이 활성화되어 있고 카테고리가 선택되어 있으면 필터링된 데이터 표시
      if (isFullTabActive && selectedCategory) {
        // 필터링 적용
        filterByCategoryInFullTab('custom-date', selectedCategory);
      } else {
        // 필터링이 없으면 전체 데이터 표시
        updatePageViewsTable(data.pageViews, 'custom-date-page-title-views');
      }
      
      // 접두어별 테이블 업데이트
      updatePrefixViewsTable(data.pageViews, 'custom-date-prefix1-views', 1);
      updatePrefixViewsTable(data.pageViews, 'custom-date-prefix2-views', 2);
      updatePrefixViewsTable(data.pageViews, 'custom-date-prefix3-views', 3);

      // 카테고리별 테이블 업데이트 추가
      updateCategoryViewsTable(data.categoryViews, 'custom-date-category-views');
    })
    .catch(error => console.error('날짜 지정 데이터 가져오기 실패:', error));
  }

  // 자동 업데이트 설정
  let customDateInterval;
  function setupAutoUpdate() {

    console.log('setupAutoUpdate 호출됨(사용 안함)');
    // 기존 인터벌 제거
    if (customDateInterval) {
      clearInterval(customDateInterval);
    }

    // 오늘 날짜 포함 확인 및 자동 업데이트 체크박스 확인
    const endDate = document.getElementById('end-date').value;
    const autoUpdate = document.getElementById('auto-update-check').checked;
    const today = new Date().toISOString().split('T')[0]; // 오늘 날짜 YYYY-MM-DD 형식

    if (endDate === today && autoUpdate) {
      // 10초마다 업데이트
      customDateInterval = setInterval(fetchCustomDateData, 10000);
    }
  }

  document.getElementById('auto-update-check').addEventListener('change', function() {
    console.log('체크박스 상태 변경: ', this.checked);

    // 이전 타이머 초기화
    if (customDateInterval) {
      clearInterval(customDateInterval);
      customDateInterval = null;
    }

    if (this.checked) {
      // 체크했을 때 일단 바로 데이터 가져오기
      fetchCustomDateData();

      // 현재 시스템 날짜 가져오기 (더 정확한 방법)
      const now = new Date();
      const today = now.getFullYear() + '-' +
          String(now.getMonth() + 1).padStart(2, '0') + '-' +
          String(now.getDate()).padStart(2, '0');

      const endDate = document.getElementById('end-date').value;
      console.log('⭐정확한 날짜 비교:', endDate, today, endDate === today);

      if (endDate === today) {
        console.log('🔄 10초 자동 업데이트 설정 성공!!');
        // 10초마다 자동 업데이트 설정
        customDateInterval = setInterval(fetchCustomDateData, 10000);
      }
    }
  });

  // 워드프레스 카테고리 데이터 로드 함수
  function loadWpCategoryData() {
    fetch('/api/wp-categories-data')
    .then(response => {
      if (!response.ok) {
        throw new Error('카테고리 데이터를 찾을 수 없어요!');
      }
      return response.json();
    })
    .then(data => {
      wpCategoryData = data;

      // 드롭다운에 카테고리 옵션 추가
      const todayFullSelect = document.getElementById('today-full-category-select');
      const customDateFullSelect = document.getElementById('custom-date-full-category-select');
      
      // 기존 옵션 초기화 (전체 카테고리 옵션은 유지)
      if (todayFullSelect) {
        todayFullSelect.innerHTML = '<option value="">전체 카테고리</option>';
      }
      if (customDateFullSelect) {
        customDateFullSelect.innerHTML = '<option value="">전체 카테고리</option>';
      }
      
      if (!data.categories) {
        console.error('카테고리 데이터가 비어있어요!');
        return;
      }
      
      // 포스트가 있는 카테고리만 필터링
      const categoriesWithPosts = new Set();
      Object.values(data.posts).forEach(categoryIds => {
        if (categoryIds && Array.isArray(categoryIds)) {
          categoryIds.forEach(catId => categoriesWithPosts.add(catId.toString()));
        }
      });
      
      // 포스트가 있는 카테고리만 정렬 (이름 기준)
      const sortedCategories = Object.entries(data.categories)
        .filter(([id, name]) => categoriesWithPosts.has(id))
        .sort((a, b) => a[1].localeCompare(b[1]));
      
      // 드롭다운에 옵션 추가
      sortedCategories.forEach(([id, name]) => {
        // HTML 엔티티 디코딩
        const decodedName = name.replace(/&amp;/g, '&');
        
        // 오늘 전체 탭 드롭다운
        const option1 = document.createElement('option');
        option1.value = id;
        option1.textContent = decodedName;
        if (todayFullSelect) todayFullSelect.appendChild(option1);
        
        // 날짜 지정 탭 드롭다운
        const option2 = document.createElement('option');
        option2.value = id;
        option2.textContent = decodedName;
        if (customDateFullSelect) customDateFullSelect.appendChild(option2);
      });
    })
    .catch(error => {
      console.error('카테고리 데이터 로드 실패:', error);
    });
  }

  // URL에서 포스트 ID 추출 함수
  function extractPostId(pagePath) {
    // /?p=59696 형식
    let match = pagePath.match(/[?&]p=(\d+)/);
    if (match) return match[1];
    
    // /12345/ 형식 (WordPress Pretty Permalink)
    match = pagePath.match(/^\/(\d+)\/?$/);
    if (match) return match[1];
    
    // /posts/12345/ 또는 /p/12345/ 같은 형식도 처리
    match = pagePath.match(/\/(\d+)\/?$/);
    if (match) return match[1];
    
    return null;
  }

  // 전체 제목 탭에서 카테고리별 필터링 함수
  function filterByCategoryInFullTab(mainTab, categoryId) {
    // 필터링 안 함 (전체 카테고리 선택)
    if (!categoryId) {
      // 원본 데이터로 복원
      if (mainTab === 'today' && currentPageViewsData.today) {
        updatePageViewsTable(currentPageViewsData.today, 'today-page-title-views');
      } else if (mainTab === 'custom-date' && currentPageViewsData.customDate) {
        updatePageViewsTable(currentPageViewsData.customDate, 'custom-date-page-title-views');
      }
      return;
    }
    
    // 필터링된 데이터 생성
    let filteredData = [];
    let sourceData = null;
    
    if (mainTab === 'today' && currentPageViewsData.today) {
      sourceData = currentPageViewsData.today;
    } else if (mainTab === 'custom-date' && currentPageViewsData.customDate) {
      sourceData = currentPageViewsData.customDate;
    }
    
    if (sourceData && wpCategoryData) {
      filteredData = sourceData.filter(item => {
        const postId = extractPostId(item.pagePath);
        if (!postId) return false;
        
        const postCategories = wpCategoryData.posts[postId];
        return postCategories && postCategories.includes(parseInt(categoryId));
      });
    }
    
    // 필터링된 데이터로 테이블 업데이트
    updatePageViewsTable(filteredData, `${mainTab}-page-title-views`);
  }

  // 카테고리별 필터링 함수
  function filterByCategory(mainTab, categoryId) {
    // 드롭다운 표시 여부 결정
    const filterContainer = document.getElementById(`${mainTab}-category-filter`);
    
    if (!categoryId) {
      // 전체 카테고리 선택시 원본 데이터로 복원
      if (mainTab === 'today' && currentPageViewsData.today) {
        updatePageViewsTable(currentPageViewsData.today, 'today-category-views');
      } else if (mainTab === 'custom-date' && currentPageViewsData.customDate) {
        updatePageViewsTable(currentPageViewsData.customDate, 'custom-date-category-views');
      }
      return;
    }
    
    // 필터링된 데이터 생성
    let filteredData = [];
    let sourceData = null;
    
    if (mainTab === 'today' && currentPageViewsData.today) {
      sourceData = currentPageViewsData.today;
    } else if (mainTab === 'custom-date' && currentPageViewsData.customDate) {
      sourceData = currentPageViewsData.customDate;
    }
    
    if (sourceData && wpCategoryData) {
      filteredData = sourceData.filter(item => {
        const postId = extractPostId(item.pagePath);
        if (!postId) return false;
        
        const postCategories = wpCategoryData.posts[postId];
        return postCategories && postCategories.includes(parseInt(categoryId));
      });
    }
    
    // 필터링된 데이터로 테이블 업데이트
    updatePageViewsTable(filteredData, `${mainTab}-category-views`);
  }

  // 워드프레스 카테고리 동기화 함수 추가 (개선 버전)
  function syncWordPressCategories(forceFullSync = false) {
    const syncButton = document.querySelector('.sync-button');
    const fullSyncButton = document.querySelector('.full-sync-button');
    const originalText = syncButton.innerHTML;
    const originalFullSyncText = fullSyncButton.innerHTML;

    // 모든 동기화 배너를 표시합니다
    document.querySelectorAll('.sync-banner').forEach(banner => {
      banner.textContent = forceFullSync ?
          '⏳ 전체 카테고리 동기화 중... 시간이 조금 걸릴 수 있어요!' :
          '⏳ 카테고리 동기화 중... 조금만 기다려주세요!';
      banner.classList.add('visible');
    });

    // 버튼 텍스트 변경 및 비활성화
    syncButton.innerHTML = '<span class="sync-button-icon">⏳</span> 동기화 중...';
    syncButton.disabled = true;
    fullSyncButton.innerHTML = '<span class="sync-button-icon">⏳</span> 동기화 중...';
    fullSyncButton.disabled = true;

    // API 호출 URL 수정 (forceFullSync 파라미터 추가)
    fetch(`/api/sync-wordpress-categories${forceFullSync ? '?forceFullSync=true' : ''}`)
    .then(response => response.json())
    .then(data => {
      // 모든 동기화 배너 업데이트
      document.querySelectorAll('.sync-banner').forEach(banner => {
        banner.textContent = '✅ 동기화 완료! 카테고리 데이터가 최신 상태예요! 💝';

        // 3초 후에 배너 숨기기
        setTimeout(() => {
          banner.classList.remove('visible');
        }, 3000);
      });

      // 동기화 후 데이터 다시 가져오기
      fetchTodayData();
      fetchLast30MinData();
      
      // 카테고리 데이터 다시 로드
      loadWpCategoryData();

      // 버튼 복원
      syncButton.innerHTML = originalText;
      syncButton.disabled = false;
      fullSyncButton.innerHTML = originalFullSyncText;
      fullSyncButton.disabled = false;
    })
    .catch(error => {
      console.error('카테고리 동기화 실패:', error);

      // 모든 동기화 배너 업데이트
      document.querySelectorAll('.sync-banner').forEach(banner => {
        banner.textContent = '❌ 동기화 실패! 다시 시도해주세요! 😢';
      });

      // 버튼 복원
      syncButton.innerHTML = originalText;
      syncButton.disabled = false;
      fullSyncButton.innerHTML = originalFullSyncText;
      fullSyncButton.disabled = false;
    });
  }

  // 기간 비교 관련 함수들
  let comparisonDataCache = {
    periodA: null,
    periodB: null,
    currentFilter: 'all'
  };

  // 기간 날짜 유효성 검사
  function validatePeriodDates(period) {
    const startDate = document.getElementById(`period-${period}-start`).value;
    const endDate = document.getElementById(`period-${period}-end`).value;

    if (startDate && endDate && new Date(startDate) > new Date(endDate)) {
      alert(`🚨 기간 ${period.toUpperCase()}의 시작일이 종료일보다 늦을 수 없어요!`);
      document.getElementById(`period-${period}-end`).value = startDate;
    }
  }

  // 빠른 날짜 선택 함수
  function setQuickDateRange(days) {
    const today = new Date();
    const excludeToday = document.getElementById('exclude-today-check').checked;
    
    // 전일 기준 체크시 하루 전부터 시작
    if (excludeToday) {
      today.setDate(today.getDate() - 1);
    }
    
    // 기간 B 설정 (최근 기간: 오늘부터 지정된 일수 전까지)
    const periodBEnd = new Date(today);
    const periodBStart = new Date(today);
    
    if (days === 1) {
      // 오늘만 (또는 어제만)
      periodBStart.setDate(today.getDate());
    } else {
      // 지정된 일수 전
      periodBStart.setDate(today.getDate() - days + 1);
    }
    
    // 기간 A 설정 (이전 기간: 기간 B 바로 전의 동일한 기간)
    const periodAEnd = new Date(periodBStart);
    periodAEnd.setDate(periodAEnd.getDate() - 1);
    
    const periodAStart = new Date(periodAEnd);
    if (days === 1) {
      periodAStart.setDate(periodAEnd.getDate());
    } else {
      periodAStart.setDate(periodAEnd.getDate() - days + 1);
    }
    
    // 날짜 포맷 함수
    const formatDate = (date) => {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    };
    
    // 입력 필드에 값 설정
    document.getElementById('period-a-start').value = formatDate(periodAStart);
    document.getElementById('period-a-end').value = formatDate(periodAEnd);
    document.getElementById('period-b-start').value = formatDate(periodBStart);
    document.getElementById('period-b-end').value = formatDate(periodBEnd);
  }

  // 비교 데이터 가져오기
  function fetchComparisonData() {
    const periodAStart = document.getElementById('period-a-start').value;
    const periodAEnd = document.getElementById('period-a-end').value;
    const periodBStart = document.getElementById('period-b-start').value;
    const periodBEnd = document.getElementById('period-b-end').value;

    if (!periodAStart || !periodAEnd || !periodBStart || !periodBEnd) {
      alert('❓ 모든 기간을 선택해주세요!');
      return;
    }

    // 로딩 표시
    const categoryTable = document.getElementById('comparison-category-table');
    categoryTable.innerHTML = '<tr><td colspan="8" style="text-align: center;">⏳ 데이터를 가져오는 중...</td></tr>';

    // 두 기간의 데이터를 병렬로 가져오기
    Promise.all([
      fetch(`/api/custom-date-pageviews?startDate=${periodAStart}&endDate=${periodAEnd}`).then(r => r.json()),
      fetch(`/api/custom-date-pageviews?startDate=${periodBStart}&endDate=${periodBEnd}`).then(r => r.json())
    ])
    .then(([dataA, dataB]) => {
      comparisonDataCache.periodA = dataA;
      comparisonDataCache.periodB = dataB;
      
      // 카테고리별 비교 데이터 생성 및 표시
      updateComparisonCategoryTable();
    })
    .catch(error => {
      console.error('비교 데이터 가져오기 실패:', error);
      categoryTable.innerHTML = '<tr><td colspan="8" style="text-align: center;">❌ 데이터 가져오기 실패!</td></tr>';
    });
  }

  // 카테고리별 비교 테이블 업데이트
  function updateComparisonCategoryTable() {
    if (!comparisonDataCache.periodA || !comparisonDataCache.periodB || !wpCategoryData) {
      return;
    }

    const categoryDataA = comparisonDataCache.periodA.categoryViews || {};
    const categoryDataB = comparisonDataCache.periodB.categoryViews || {};

    // 전체 조회수 계산
    const totalViewsA = Object.values(categoryDataA).reduce((sum, views) => sum + views, 0);
    const totalViewsB = Object.values(categoryDataB).reduce((sum, views) => sum + views, 0);

    // 모든 카테고리 수집
    const allCategories = new Set([
      ...Object.keys(categoryDataA),
      ...Object.keys(categoryDataB)
    ]);

    // 카테고리별 비교 데이터 생성
    let comparisonData = Array.from(allCategories).map(category => {
      const viewsA = categoryDataA[category] || 0;
      const viewsB = categoryDataB[category] || 0;
      const change = viewsB - viewsA;
      const changeRate = viewsA > 0 ? ((viewsB - viewsA) / viewsA * 100) : (viewsB > 0 ? 100 : 0);
      const shareA = totalViewsA > 0 ? (viewsA / totalViewsA * 100) : 0;
      const shareB = totalViewsB > 0 ? (viewsB / totalViewsB * 100) : 0;

      return {
        category,
        viewsA: Math.round(viewsA),
        viewsB: Math.round(viewsB),
        change,
        changeRate,
        shareA,
        shareB
      };
    });

    // 필터 적용
    comparisonData = applyFilterToData(comparisonData, comparisonDataCache.currentFilter);

    // 테이블 업데이트
    const tableBody = document.getElementById('comparison-category-table');
    tableBody.innerHTML = '';

    if (comparisonData.length === 0) {
      tableBody.innerHTML = '<tr><td colspan="8" style="text-align: center;">😢 조건에 맞는 데이터가 없어요!</td></tr>';
      return;
    }

    comparisonData.forEach((item, index) => {
      const row = document.createElement('tr');
      row.className = 'expandable-row';
      row.onclick = () => showCategoryDetail(item.category);

      // 순번
      const numCell = document.createElement('td');
      numCell.textContent = index + 1;
      row.appendChild(numCell);

      // 카테고리명
      const categoryCell = document.createElement('td');
      categoryCell.innerHTML = `${item.category} <small style="color: #666;">(클릭하여 상세보기)</small>`;
      row.appendChild(categoryCell);

      // 기간 A
      const viewsACell = document.createElement('td');
      if (item.viewsA > item.viewsB) {
        viewsACell.innerHTML = `<strong>${item.viewsA.toLocaleString()}</strong>`;
      } else {
        viewsACell.textContent = item.viewsA.toLocaleString();
      }
      row.appendChild(viewsACell);

      // 기간 B
      const viewsBCell = document.createElement('td');
      if (item.viewsB > item.viewsA) {
        viewsBCell.innerHTML = `<strong>${item.viewsB.toLocaleString()}</strong>`;
      } else {
        viewsBCell.textContent = item.viewsB.toLocaleString();
      }
      row.appendChild(viewsBCell);

      // 변화량
      const changeCell = document.createElement('td');
      if (item.change > 0) {
        changeCell.innerHTML = `<span class="increase">+${item.change.toLocaleString()}↑</span>`;
      } else if (item.change < 0) {
        changeCell.innerHTML = `<span class="decrease">${item.change.toLocaleString()}↓</span>`;
      } else {
        changeCell.innerHTML = '<span class="unchanged">0</span>';
      }
      row.appendChild(changeCell);

      // 변화율
      const changeRateCell = document.createElement('td');
      if (item.changeRate > 0) {
        changeRateCell.innerHTML = `<span class="change-badge increase">+${item.changeRate.toFixed(1)}%</span>`;
      } else if (item.changeRate < 0) {
        changeRateCell.innerHTML = `<span class="change-badge decrease">${item.changeRate.toFixed(1)}%</span>`;
      } else {
        changeRateCell.innerHTML = '<span class="unchanged">0%</span>';
      }
      row.appendChild(changeRateCell);

      // 기간 A 비중
      const shareACell = document.createElement('td');
      if (item.shareA > item.shareB) {
        shareACell.innerHTML = `<span style="color: #2196F3;"><strong>${item.shareA.toFixed(1)}%</strong></span>`;
      } else {
        shareACell.innerHTML = `<span style="color: #2196F3;">${item.shareA.toFixed(1)}%</span>`;
      }
      row.appendChild(shareACell);

      // 기간 B 비중
      const shareBCell = document.createElement('td');
      if (item.shareB > item.shareA) {
        shareBCell.innerHTML = `<span style="color: #FF9800;"><strong>${item.shareB.toFixed(1)}%</strong></span>`;
      } else {
        shareBCell.innerHTML = `<span style="color: #FF9800;">${item.shareB.toFixed(1)}%</span>`;
      }
      row.appendChild(shareBCell);

      tableBody.appendChild(row);
    });
  }

  // 필터 적용 함수
  function applyFilterToData(data, filterType) {
    switch (filterType) {
      case 'top-increase':
        return data
          .filter(item => item.change > 0)
          .sort((a, b) => b.change - a.change)
          .slice(0, 25);
      
      case 'top-decrease':
        return data
          .filter(item => item.change < 0)
          .sort((a, b) => a.change - b.change)
          .slice(0, 25);
      
      
      case 'rapid-growth':
        return data.filter(item => item.changeRate >= 100);
      
      default:
        return data.sort((a, b) => b.change - a.change);
    }
  }

  // 필터 버튼 클릭 처리
  function applyComparisonFilter(filterType) {
    comparisonDataCache.currentFilter = filterType;
    
    // 버튼 스타일 업데이트
    document.querySelectorAll('#comparison-filters .filter-btn').forEach(btn => {
      btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // 상세 비교 창 닫기
    closeComparisonDetail();
    
    // 테이블 업데이트
    updateComparisonCategoryTable();
  }

  // 카테고리 상세 보기
  function showCategoryDetail(categoryName) {
    if (!comparisonDataCache.periodA || !comparisonDataCache.periodB || !wpCategoryData) {
      return;
    }

    // 해당 카테고리의 카테고리 ID 찾기
    let categoryId = null;
    Object.entries(wpCategoryData.categories).forEach(([id, name]) => {
      if (name.replace(/&amp;/g, '&') === categoryName) {
        categoryId = id;
      }
    });

    if (!categoryId) return;

    // 해당 카테고리의 포스트들 필터링
    const postsInCategory = Object.entries(wpCategoryData.posts)
      .filter(([postId, categoryIds]) => categoryIds && categoryIds.includes(parseInt(categoryId)))
      .map(([postId]) => postId);

    // 포스트별 조회수 데이터 수집
    const postDataA = {};
    const postDataB = {};

    comparisonDataCache.periodA.pageViews.forEach(page => {
      const postId = extractPostId(page.pagePath);
      if (postId && postsInCategory.includes(postId)) {
        postDataA[postId] = {
          title: page.pageTitle,
          views: page.pageViews
        };
      }
    });

    comparisonDataCache.periodB.pageViews.forEach(page => {
      const postId = extractPostId(page.pagePath);
      if (postId && postsInCategory.includes(postId)) {
        postDataB[postId] = {
          title: page.pageTitle,
          views: page.pageViews
        };
      }
    });

    // 모든 포스트 수집
    const allPostIds = new Set([...Object.keys(postDataA), ...Object.keys(postDataB)]);
    
    // 포스트별 비교 데이터 생성
    const postComparison = Array.from(allPostIds).map(postId => {
      const dataA = postDataA[postId] || { title: '(제목 없음)', views: 0 };
      const dataB = postDataB[postId] || { title: dataA.title, views: 0 };
      const change = dataB.views - dataA.views;
      const changeRate = dataA.views > 0 ? ((dataB.views - dataA.views) / dataA.views * 100) : (dataB.views > 0 ? 100 : 0);

      return {
        title: dataB.title || dataA.title,
        viewsA: Math.round(dataA.views),
        viewsB: Math.round(dataB.views),
        change,
        changeRate
      };
    }).sort((a, b) => b.change - a.change);

    // 상세 테이블 표시
    const detailBox = document.getElementById('comparison-post-detail');
    const detailTitle = document.getElementById('comparison-post-detail-title');
    const tableBody = document.getElementById('comparison-post-table');

    detailTitle.textContent = `📈 "${categoryName}" 카테고리 포스트별 상세 비교`;
    detailBox.style.display = 'block';
    
    tableBody.innerHTML = '';
    postComparison.forEach((post, index) => {
      const row = document.createElement('tr');

      // 순번
      const numCell = document.createElement('td');
      numCell.textContent = index + 1;
      row.appendChild(numCell);

      // 포스트 제목
      const titleCell = document.createElement('td');
      titleCell.textContent = post.title;
      row.appendChild(titleCell);

      // 기간 A
      const viewsACell = document.createElement('td');
      if (post.viewsA > post.viewsB) {
        viewsACell.innerHTML = `<strong>${post.viewsA.toLocaleString()}</strong>`;
      } else {
        viewsACell.textContent = post.viewsA.toLocaleString();
      }
      row.appendChild(viewsACell);

      // 기간 B
      const viewsBCell = document.createElement('td');
      if (post.viewsB > post.viewsA) {
        viewsBCell.innerHTML = `<strong>${post.viewsB.toLocaleString()}</strong>`;
      } else {
        viewsBCell.textContent = post.viewsB.toLocaleString();
      }
      row.appendChild(viewsBCell);

      // 변화량
      const changeCell = document.createElement('td');
      if (post.change > 0) {
        changeCell.innerHTML = `<span class="increase">+${post.change.toLocaleString()}↑</span>`;
      } else if (post.change < 0) {
        changeCell.innerHTML = `<span class="decrease">${post.change.toLocaleString()}↓</span>`;
      } else {
        changeCell.innerHTML = '<span class="unchanged">0</span>';
      }
      row.appendChild(changeCell);

      // 변화율
      const changeRateCell = document.createElement('td');
      if (post.changeRate > 0) {
        changeRateCell.innerHTML = `<span class="change-badge increase">+${post.changeRate.toFixed(1)}%</span>`;
      } else if (post.changeRate < 0) {
        changeRateCell.innerHTML = `<span class="change-badge decrease">${post.changeRate.toFixed(1)}%</span>`;
      } else {
        changeRateCell.innerHTML = '<span class="unchanged">0%</span>';
      }
      row.appendChild(changeRateCell);

      tableBody.appendChild(row);
    });

    // 스크롤
    detailBox.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
  }

  // 상세 비교 창 닫기 함수
  function closeComparisonDetail() {
    const detailBox = document.getElementById('comparison-post-detail');
    detailBox.style.display = 'none';
  }

  // 날짜 지정 탭용 빠른 날짜 선택 함수
  function setCustomDateRange(days) {
    const today = new Date();
    const excludeToday = document.getElementById('custom-date-exclude-today').checked;
    
    // 전일 기준 체크시 하루 전부터 시작
    if (excludeToday) {
      today.setDate(today.getDate() - 1);
    }
    
    const endDate = new Date(today);
    const startDate = new Date(today);
    
    if (days === 1) {
      // 오늘만 (또는 어제만)
      startDate.setDate(today.getDate());
    } else {
      // 지정된 일수 전
      startDate.setDate(today.getDate() - days + 1);
    }
    
    // 날짜 포맷 함수
    const formatDate = (date) => {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    };
    
    // 입력 필드에 값 설정
    document.getElementById('start-date').value = formatDate(startDate);
    document.getElementById('end-date').value = formatDate(endDate);
  }

</script>
</body>
</html>